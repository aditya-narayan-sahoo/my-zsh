# ┌─────────────────────────────┐
# │ Arch Linux System Utilities │
# └─────────────────────────────┘

# ─── Command Availability Check ─────────────────────────────────────────────
is_installed() {
  command -v "$1" >/dev/null 2>&1
}

# ─── Spinner Function ───────────────────────────────────────────────────────
spinner() {
  local pid=$1 delay=0.1 spinstr='|/-\'
  while kill -0 $pid 2>/dev/null; do
    for ((i=0; i<${#spinstr}; i++)); do
      echo -ne "${spinstr:i:1}  \r"
      sleep $delay
    done
  done
  echo -ne "   \r"
}

# ─── Drop Memory Caches ─────────────────────────────────────────────────────
drop-caches() {
  echo "💡 Dropping memory caches..."
  sync && sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
}

# ─── System Update ──────────────────────────────────────────────────────────
upgrade() {
  echo "🔄 Updating system packages..."
  local start=$(date +%s)

  sudo pacman -Syu && echo "✅ System updated via pacman." || echo "❌ Pacman update failed."

  if is_installed yay; then
    echo "🔄 Updating AUR packages..."
    yay -Syu && echo "✅ AUR packages updated." || echo "❌ AUR update failed."
  fi

  if is_installed flatpak; then
    echo "🔄 Updating Flatpak packages..."
    flatpak update -y && echo "✅ Flatpak updated." || echo "❌ Flatpak update failed."
  fi

  local end=$(date +%s)
  echo "⏱️ Total time: $((end - start)) seconds."
}

# ─── India Mirrorlist + Upgrade ─────────────────────────────────────────────
mirrup() {
  echo "🌐 Backing up mirrorlist..."
  sudo cp /etc/pacman.d/mirrorlist "/etc/pacman.d/mirrorlist.backup.$(date +%Y%m%d_%H%M%S)"

  echo "🌐 Updating mirrorlist (India)..."
  if sudo reflector --country India --protocol https --sort rate --save /etc/pacman.d/mirrorlist; then
    echo "✅ Mirrorlist updated."
    upgrade
    echo "📋 Current mirrorlist:"
    echo "-------------------------------------------------"
    cat /etc/pacman.d/mirrorlist
    echo "-------------------------------------------------"
  else
    echo "❌ Reflector failed."
  fi
}

# ─── Global Mirrorlist + Upgrade ────────────────────────────────────────────
update-all() {
  local tmpfile=$(mktemp)
  sudo true || return 1

  if rate-mirrors --protocol https --save="$tmpfile" arch --max-delay=21600; then
    head -n 4 "$tmpfile" >"$tmpfile.head"
    grep -v '^#' "$tmpfile" | sed '1,4d' >>"$tmpfile.head"
    sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-backup
    sudo mv "$tmpfile.head" /etc/pacman.d/mirrorlist
    drop-caches
    echo "🔄 Updating system with new mirrors..."
    upgrade
  else
    echo "❌ rate-mirrors failed."
  fi

  rm -f "$tmpfile" "$tmpfile.head"
}

# ─── Cache Cleaner ──────────────────────────────────────────────────────────
cclean() {
  local force=false docker=false npm=false

  for arg in "$@"; do
    case $arg in
      --force|-f) force=true ;;
      --docker) docker=true ;;
      --npm) npm=true ;;
    esac
  done

  echo "🧹 Cleaning pacman cache..."
  sudo pacman -Sc --noconfirm

  if $force || read -q "REPLY?🗑️ Delete all cached pacman packages? (y/N): "; then
    sudo pacman -Scc --noconfirm
    sudo rm -rf /var/cache/pacman/pkg/*
    echo "✅ Full pacman cache cleaned."
  else
    echo "⏭️ Skipped full pacman cache clean."
  fi

  if is_installed yay; then
    echo "🧹 Cleaning yay cache..."
    yay -Sc --noconfirm
    if $force || read -q "REPLY?🗑️ Delete all cached yay packages? (y/N): "; then
      yay -Scc --noconfirm
    else
      echo "⏭️ Skipped full yay cache clean."
    fi
  fi

  if is_installed flatpak; then
    echo "🧹 Cleaning unused Flatpak runtimes..."
    flatpak uninstall --unused -y
  fi

  echo "🧾 Vacuuming journal logs > 7 days..."
  sudo journalctl --vacuum-time=7d

  if $docker && is_installed docker && systemctl is-active --quiet docker; then
    echo "🐳 Cleaning Docker..."
    docker system prune -af --volumes
  fi

  if $npm && is_installed npm && [[ -d "$HOME/.npm" ]]; then
    echo "📦 Cleaning npm cache..."
    npm cache clean --force
  fi

  echo "✅ Cleanup complete."
}

# ─── Git Add, Commit, Push ──────────────────────────────────────────────────
gac() {
  [[ -z "$1" ]] && { echo "❌ Commit message required."; return 1; }

  git rev-parse --git-dir >/dev/null 2>&1 || { echo "❌ Not a Git repo."; return 1; }

  echo "📂 Staging changes..."
  git add .

  echo "📝 Committing: $*"
  git commit -m "$*" || { echo "⚠️ Commit failed."; return 1; }

  local branch=$(git rev-parse --abbrev-ref HEAD)
  echo "🚀 Pushing to '$branch'..."
  git push origin "$branch" && echo "✅ Pushed." || echo "❌ Push failed."
}

# Optional auto-completion for gac
_gac() {
  compadd -- "Your commit message here"
}
compdef _gac gac

gcom() {
	git add .
	git commit -m "$1"
}

# ─── System Health Report ───────────────────────────────────────────────────
syshealth() {
  echo "🖥️ System Health Report"

  echo -n "🧠 CPU: "
  top -bn1 | awk '/Cpu/ {print $2 + $4 "%"}'

  echo -n "💾 RAM: "
  free -h | awk '/^Mem:/ {print $3 " used / " $2 " total"}'

  echo -n "💽 Disk (/): "
  df -h / | awk 'NR==2 {print $3 " used / " $2 " total (" $5 " used)"}'

  if is_installed sensors; then
    echo "🌡️ Temperature:"
    sensors | grep -E 'temp[1-9]_input|Core'
  else
    echo "⚠️ Install 'lm_sensors' for temp info."
  fi

  echo "🔧 Services (docker, sshd):"
  for svc in docker sshd; do
    systemctl is-active --quiet "$svc" && echo " ✔ $svc running" || echo " ❌ $svc not running"
  done
}

# ─── End of Arch Linux System Utilities ─────────────────────────────────────
